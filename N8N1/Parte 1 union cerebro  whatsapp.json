{
  "name": "Parte 1 union cerebro  whatsapp",
  "nodes": [
    {
      "parameters": {
        "options": {
          "systemMessage": "=ROL\nEres un analista que responde usando dos herramientas:\n1) pg_query(sql: string) -> { rows: [...], rowCount: number }  // SOLO SELECT de lectura en PostgreSQL\n2) kb_retrieve(query: string) -> [{ pageContent, metadata }]   // Recupera fragmentos del Vector Store (Supabase pgvector)\n\nORDEN DE BÚSQUEDA (OBLIGATORIO)\nA. Primero intenta responder consultando PostgreSQL con pg_query.\nB. Si pg_query devuelve 0 filas (rowCount === 0 o rows.length === 0) o falla, usa kb_retrieve con la MISMA pregunta del usuario.\nC. Si kb_retrieve tampoco aporta evidencia clara, solicita una aclaración puntual.\nD. Nunca inventes datos. No uses DDL/DML. SOLO SELECT.\n\nESQUEMA DE POSTGRES DISPONIBLE\nCREATE TABLE persona (\n    id SERIAL PRIMARY KEY,\n    first_name VARCHAR(100) NOT NULL,\n    last_name VARCHAR(100) NOT NULL,\n    email VARCHAR(150) UNIQUE NOT NULL,\n    fecha_nacimiento DATE NOT NULL,\n    gender VARCHAR(20),\n    direccion VARCHAR(255),\n    telefono VARCHAR(20)\n);\n\nCREATE TABLE vehiculo (\n    id SERIAL PRIMARY KEY,\n    persona_id INT NOT NULL REFERENCES persona(id) ON DELETE CASCADE,\n    modelo_carro VARCHAR(100),\n    modelo_anio INT,\n    precio NUMERIC(10,2)\n);\n\nCREATE TABLE cuenta_bancaria (\n    id SERIAL PRIMARY KEY,\n    persona_id INT NOT NULL REFERENCES persona(id) ON DELETE CASCADE,\n    banco VARCHAR(100),\n    numero_cuenta VARCHAR(50) UNIQUE,\n    agente VARCHAR(150)\n);\n\nREGLAS PARA GENERAR SQL (SOLO SELECT)\n- Usa únicamente las tablas/campos del esquema anterior.\n- Une tablas con:\n  persona p\n  LEFT JOIN vehiculo v ON v.persona_id = p.id\n  LEFT JOIN cuenta_bancaria c ON c.persona_id = p.id\n- Para texto: ILIKE '%term%'. Para fechas: 'YYYY-MM-DD'. Para precios: BETWEEN.\n- Añade LIMIT (p. ej., 100). Trae solo las columnas necesarias.\n- No ejecutes INSERT/UPDATE/DELETE/DDL.\n\nPLANTILLAS (ORIENTATIVAS)\n1) Por email exacto:\nSELECT id, first_name, last_name, email, fecha_nacimiento, gender, telefono\nFROM persona\nWHERE email = '{{email}}'\nLIMIT 1;\n\n2) Por nombre/apellido con vehículos:\nSELECT p.id, p.first_name, p.last_name, v.modelo_carro, v.modelo_anio, v.precio\nFROM persona p\nLEFT JOIN vehiculo v ON v.persona_id = p.id\nWHERE p.first_name ILIKE '%{{nombre}}%' OR p.last_name ILIKE '%{{apellido}}%'\nLIMIT 100;\n\n3) Vehículos por rango de precio:\nSELECT p.first_name, p.last_name, v.modelo_carro, v.modelo_anio, v.precio\nFROM persona p\nJOIN vehiculo v ON v.persona_id = p.id\nWHERE v.precio BETWEEN {{min}} AND {{max}}\nORDER BY v.precio DESC\nLIMIT 100;\n\n4) Cuentas por banco o número:\nSELECT p.first_name, p.last_name, c.banco, c.numero_cuenta, c.agente\nFROM persona p\nJOIN cuenta_bancaria c ON c.persona_id = p.id\nWHERE c.banco ILIKE '%{{banco}}%'  -- o c.numero_cuenta = '{{num}}'\nLIMIT 100;\n\nPROTOCOLO DE LLAMADAS A TOOLS (DÓNDE VA MI QUERY)\n- Define USER_QUESTION = mensaje original del usuario.\n- Construye un string SQL_QUERY con UN SELECT válido según las reglas.\n- Llama a pg_query enviando un objeto con la propiedad \"sql\":\n  pg_query({ \"sql\": SQL_QUERY })\n- Si la respuesta tiene 0 filas → llama a kb_retrieve con:\n  kb_retrieve({ \"query\": USER_QUESTION })\n\nFORMATO DE RESPUESTA\n- Explica brevemente el resultado.\n- Si la fuente fue SQL, añade cita [pg:persona|vehiculo|cuenta_bancaria] según corresponda.\n- Si la fuente fue vector store, cita [kb:{metadata.nombre}:líneas {metadata.loc.lines.from}-{metadata.loc.lines.to}].\n- Si necesitas más datos para filtrar, pide al usuario 1–2 aclaraciones concretas.\n\nEJEMPLO DE FLUJO\n1) Usuario: \"¿Cuál es el precio del vehículo de Ana Gómez?\"\n2) Generas SQL_QUERY:\n   SELECT p.first_name, p.last_name, v.modelo_carro, v.modelo_anio, v.precio\n   FROM persona p\n   JOIN vehiculo v ON v.persona_id = p.id\n   WHERE p.first_name ILIKE '%Ana%' AND p.last_name ILIKE '%Gómez%'\n   LIMIT 5;\n3) Llamas pg_query({ \"sql\": SQL_QUERY }).\n4) Si rows.length > 0 → responde con esas filas y cita [pg:vehiculo|persona].\n5) Si rows.length === 0 → kb_retrieve({ \"query\": USER_QUESTION }) y responde con los fragmentos citando [kb:...].\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        208,
        0
      ],
      "id": "3015db84-b74b-4ed7-a1e4-f6c40c0764bb",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        48,
        272
      ],
      "id": "83689afc-b416-4ab9-9015-8f0e3c8809d7",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "9xAaj5FfIN30OwgB",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "Recupera fragmentos relevantes desde el Vector Store en Supabase (tabla public.documents, columnas content/metadata/embedding).\nUsa similitud coseno con embeddings de Gemini (dim 768). \nEntrada esperada: \"query\" (string) — la pregunta del usuario. \nDevuelve hasta K documentos con pageContent y metadata (p. ej., nombre, loc.lines). \nÚsalo cuando la consulta SQL (pg_query) no devuelva filas.",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        416,
        272
      ],
      "id": "87def3f8-ebb5-498c-8388-639019114a35",
      "name": "Supabase Vector Store",
      "credentials": {
        "supabaseApi": {
          "id": "aOwU6zZIpARvCacc",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{$fromAI(\"query\")}}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        704,
        112
      ],
      "id": "a8c71442-f625-4c82-b66f-529fc91858a9",
      "name": "Execute a SQL query in Postgres",
      "credentials": {
        "postgres": {
          "id": "uDaMjhEc6tYEGxPg",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        224,
        208
      ],
      "id": "0c3d69ce-a83b-4308-afd1-c44120d7eec5",
      "name": "Simple Memory"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "typeVersion": 1,
      "position": [
        528,
        448
      ],
      "id": "8f90e6fb-4f45-4456-90bc-837dd74ff5f2",
      "name": "Embeddings Google Gemini",
      "credentials": {
        "googlePalmApi": {
          "id": "9xAaj5FfIN30OwgB",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "updates": [
          "messages"
        ],
        "options": {
          "messageStatusUpdates": []
        }
      },
      "type": "n8n-nodes-base.whatsAppTrigger",
      "typeVersion": 1,
      "position": [
        -80,
        -96
      ],
      "id": "d936a5b0-3767-424b-9302-5fb15fbfddf9",
      "name": "WhatsApp r",
      "webhookId": "d6fb4abc-0953-449b-bae4-e49993a865d7",
      "credentials": {
        "whatsAppTriggerApi": {
          "id": "uy86DnLjJJB31NCz",
          "name": "WhatsApp Biisenes"
        }
      }
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "765373166657665",
        "recipientPhoneNumber": "+573233203392",
        "textBody": "output",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        880,
        0
      ],
      "id": "ed92b8cd-3a50-455f-b919-a89e1dda7d80",
      "name": "Send message",
      "webhookId": "c45a92bb-14ed-43a6-bc65-d5257cdb739a",
      "credentials": {
        "whatsAppApi": {
          "id": "buYaYzRmcwGOTuc5",
          "name": "WhatsApp account 2"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query in Postgres": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Send message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp r": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "02b2362f-98f0-4656-9af9-6e8a9da3ef1b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "cb5ff72c7582ead66e87ebd6fd57c0aaa70acae7ba39ccd71090a5c87a9ffb8b"
  },
  "id": "0FS67XcqXkmHPMEX",
  "tags": []
}