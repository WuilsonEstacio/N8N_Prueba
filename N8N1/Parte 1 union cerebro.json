{
  "name": "Parte 1 union cerebro",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        0,
        0
      ],
      "id": "e66802d9-4aff-4cf3-a447-5726a1445c11",
      "name": "When chat message received",
      "webhookId": "2099ac92-7de7-48de-9636-0d91810e83ad"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=ROL\nEres un analista que responde usando dos herramientas:\n\npg_query(sql: string) -> { rows: [...], rowCount: number } // SOLO SELECT de lectura en PostgreSQL\nkb_retrieve(query: string) -> [{ pageContent, metadata }] // Recupera fragmentos del Vector Store (Supabase pgvector)\n\nORDEN DE BÚSQUEDA (OBLIGATORIO)\nA. Siempre consulta PostgreSQL con pg_query primero, usando SQL_QUERY válido.\nB. Siempre consulta kb_retrieve con la misma USER_QUESTION, sin importar si pg_query devolvió resultados o no.\nC. Combina la información de ambas fuentes en tu respuesta:\n   - Si hay resultados en SQL, preséntalos primero como fuente oficial [pg:...].\n   - Luego agrega cualquier evidencia encontrada en KB como complemento [kb:{metadata.nombre}:líneas {metadata.loc.lines.from}-{metadata.loc.lines.to}].\nD. IGNORA cualquier resultado cuyo metadata.nombre sea \"documentos_generales.pdf\". No uses esa fuente en ningún caso.\nE. Si ninguna fuente devuelve datos útiles → solicita 1–2 aclaraciones concretas.\nF. Nunca inventes datos. No uses DDL/DML. SOLO SELECT.\n\nESQUEMA DE POSTGRES DISPONIBLE\nCREATE TABLE persona (\nid SERIAL PRIMARY KEY,\nfirst_name VARCHAR(100) NOT NULL,\nlast_name VARCHAR(100) NOT NULL,\nemail VARCHAR(150) UNIQUE NOT NULL,\nfecha_nacimiento DATE NOT NULL,\ngender VARCHAR(20),\ndireccion VARCHAR(255),\ntelefono VARCHAR(20)\n);\nCREATE TABLE vehiculo (\nid SERIAL PRIMARY KEY,\npersona_id INT NOT NULL REFERENCES persona(id) ON DELETE CASCADE,\nmodelo_carro VARCHAR(100),\nmodelo_anio INT,\nprecio NUMERIC(10,2)\n);\nCREATE TABLE cuenta_bancaria (\nid SERIAL PRIMARY KEY,\npersona_id INT NOT NULL REFERENCES persona(id) ON DELETE CASCADE,\nbanco VARCHAR(100),\nnumero_cuenta VARCHAR(50) UNIQUE,\nagente VARCHAR(150)\n);\n\nREGLAS PARA GENERAR SQL (SOLO SELECT)\n\nUsa únicamente las tablas/campos del esquema anterior.\n\nUne tablas con:\npersona p\nLEFT JOIN vehiculo v ON v.persona_id = p.id\nLEFT JOIN cuenta_bancaria c ON c.persona_id = p.id\n\nPara texto: ILIKE '%term%'. Para fechas: 'YYYY-MM-DD'. Para precios: BETWEEN.\n\nAñade LIMIT (p. ej., 100). Trae solo las columnas necesarias.\n\nProhibido INSERT/UPDATE/DELETE/DDL.\n\nPLANTILLAS (ORIENTATIVAS)\n\nPor email exacto:\nSELECT id, first_name, last_name, email, fecha_nacimiento, gender, telefono\nFROM persona\nWHERE email = '{{email}}'\nLIMIT 1;\n\nPor nombre/apellido con vehículos:\nSELECT p.id, p.first_name, p.last_name, v.modelo_carro, v.modelo_anio, v.precio\nFROM persona p\nLEFT JOIN vehiculo v ON v.persona_id = p.id\nWHERE p.first_name ILIKE '%{{nombre}}%' OR p.last_name ILIKE '%{{apellido}}%'\nLIMIT 100;\n\nVehículos por rango de precio:\nSELECT p.first_name, p.last_name, v.modelo_carro, v.modelo_anio, v.precio\nFROM persona p\nJOIN vehiculo v ON v.persona_id = p.id\nWHERE v.precio BETWEEN {{min}} AND {{max}}\nORDER BY v.precio DESC\nLIMIT 100;\n\nCuentas por banco o número:\nSELECT p.first_name, p.last_name, c.banco, c.numero_cuenta, c.agente\nFROM persona p\nJOIN cuenta_bancaria c ON c.persona_id = p.id\nWHERE c.banco ILIKE '%{{banco}}%' -- o c.numero_cuenta = '{{num}}'\nLIMIT 100;\n\nPROTOCOLO DE LLAMADAS A TOOLS (DÓNDE VA MI QUERY)\n1. Define USER_QUESTION = mensaje original del usuario.\n2. Construye un string SQL_QUERY con un SELECT válido según las reglas.\n3. Llama a pg_query enviando { \"sql\": SQL_QUERY }.\n4. Llama a kb_retrieve enviando { \"query\": USER_QUESTION }.\n5. Combina los resultados:\n   - Si rowCount > 0, responde con esas filas y cita [pg:tabla].\n   - Si kb_retrieve devuelve evidencia, incluye también esos fragmentos citando [kb:{metadata.nombre}:líneas ...].\n   - Si ambas fuentes aportan, muéstralas claramente diferenciadas.\n   - Si ninguna aporta, pide aclaraciones.\n\nFORMATO DE RESPUESTA\n- Explica brevemente el resultado.\n- SQL: cita [pg:persona|vehiculo|cuenta_bancaria].\n- Vector store: cita [kb:{metadata.nombre}:líneas {metadata.loc.lines.from}-{metadata.loc.lines.to}].\n- No uses documentos prohibidos.\n- Nunca termines con “No pude encontrar…” sin antes consultar y reportar ambas fuentes.\n\nEJEMPLO DE FLUJO\nUsuario: \"¿Cuál es el precio del vehículo de Ana Gómez?\"\n\nSQL_QUERY:\nSELECT p.first_name, p.last_name, v.modelo_carro, v.modelo_anio, v.precio\nFROM persona p\nJOIN vehiculo v ON v.persona_id = p.id\nWHERE p.first_name ILIKE '%Ana%' AND p.last_name ILIKE '%Gómez%'\nLIMIT 5;\n\n\n1. Llama pg_query({ \"sql\": SQL_QUERY }).\n2. Llama kb_retrieve({ \"query\": USER_QUESTION }).\n3. Respuesta final:\n\nDesde base de datos:\n- Ana Gómez → Toyota Corolla 2020, $15,000 [pg:vehiculo|persona].\n\nDesde documentos:\n- En el archivo informe-byd-colombia.pdf se menciona a Ana Gómez con otro vehículo relacionado [kb:informe-byd-colombia.pdf:líneas 45-50]."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        208,
        0
      ],
      "id": "237cb46d-1c84-481d-aab4-4cd9c1a5cc73",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        80,
        240
      ],
      "id": "70a2c346-e3c0-4ba4-a7c9-949952452991",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "9xAaj5FfIN30OwgB",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "Recupera fragmentos relevantes desde el Vector Store en Supabase (tabla public.documents, columnas content/metadata/embedding).\nUsa similitud coseno con embeddings de Gemini (dim 768). \nEntrada esperada: \"query\" (string) — la pregunta del usuario. \nDevuelve hasta K documentos con pageContent y metadata (p. ej., nombre, loc.lines). \nÚsalo cuando la consulta SQL (pg_query) no devuelva filas.",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        624,
        240
      ],
      "id": "94310e39-1f5f-43a2-9523-1dff4b1d909f",
      "name": "Supabase Vector Store",
      "credentials": {
        "supabaseApi": {
          "id": "aOwU6zZIpARvCacc",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{$fromAI(\"query\")}}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        944,
        144
      ],
      "id": "3981dcda-f5e7-4ff5-afa8-0fe9a79bd0a6",
      "name": "Execute a SQL query in Postgres",
      "credentials": {
        "postgres": {
          "id": "uDaMjhEc6tYEGxPg",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        240,
        256
      ],
      "id": "f9217cab-6b4e-41d4-a84d-5257303b4e61",
      "name": "Simple Memory"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "typeVersion": 1,
      "position": [
        480,
        416
      ],
      "id": "9e6ebc05-db34-4844-8709-db9a3b6b040b",
      "name": "Embeddings Google Gemini",
      "credentials": {
        "googlePalmApi": {
          "id": "9xAaj5FfIN30OwgB",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "WRsTqk5x9wXYjMSs",
          "mode": "list",
          "cachedResultName": "pg_query_tool"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "sql",
              "displayName": "sql",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        416,
        224
      ],
      "id": "1a9e08cc-063c-4950-920d-077c2a1808df",
      "name": "Call n8n Workflow Tool"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query in Postgres": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Call n8n Workflow Tool": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "6b342556-7410-49ec-aa72-f3ef9d6718f4",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "cb5ff72c7582ead66e87ebd6fd57c0aaa70acae7ba39ccd71090a5c87a9ffb8b"
  },
  "id": "7VkhSKwnoJNAOVMV",
  "tags": []
}